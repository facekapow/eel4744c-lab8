
lab8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00802000  000003ae  00000422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000698  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000051ae  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003c3c  00000000  00000000  00005886  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ee  00000000  00000000  000094c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00009ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000047ee  00000000  00000000  00009ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003b  00000000  00000000  0000e2d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000e30d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	12 e2       	ldi	r17, 0x22	; 34
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee ea       	ldi	r30, 0xAE	; 174
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 30       	cpi	r26, 0x00	; 0
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 34 01 	call	0x268	; 0x268 <main>
 234:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <clock_init>:

 .section .text

 .global clock_init
 clock_init:
	push r24
 23c:	8f 93       	push	r24

	ldi r24, OSC_RC32MEN_bm
 23e:	82 e0       	ldi	r24, 0x02	; 2
	sts OSC_CTRL, R24		;Enables the 32MHz internal oscillator
 240:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>

00000244 <check32MHzStatus>:

check32MHzStatus:
	lds	r24, OSC_STATUS
 244:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
	;Ensure that the 32MHz clock is ready before proceeding
	sbrs r24, OSC_RC32MRDY_bp
 248:	81 ff       	sbrs	r24, 1
	rjmp check32MHzStatus
 24a:	fc cf       	rjmp	.-8      	; 0x244 <check32MHzStatus>

	;Writing to CCP disables interrupts for a certain number of cycles
	;to give the clock time to switch sources. It also enables writes to certain registers.
	ldi r24, 0xD8
 24c:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24				
 24e:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x7de034>

	;Finally, select the now-ready 32MHz oscillator as the new clock source. 
	ldi	r24, 0x01
 252:	81 e0       	ldi	r24, 0x01	; 1
	sts CLK_CTRL, r24
 254:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>

00000258 <skip32MHZ_enable>:
skip32MHZ_enable:
	;CPU CLK prescaler settings 
	;Use values that are powers of 2 from 1 to 512 (1, 2, 4, 8, 16, ..., 512) for A. See Table 7-2 in the manual. 
	;You can also change B/C. See Table 7-3 in the manual. 

	ldi r24, 0xD8
 258:	88 ed       	ldi	r24, 0xD8	; 216
	sts CPU_CCP, r24
 25a:	80 93 34 00 	sts	0x0034, r24	; 0x800034 <__TEXT_REGION_LENGTH__+0x7de034>
	
	ldi r24, ((0x00 << 2) | (0x00 << 0))	;32MHz
 25e:	80 e0       	ldi	r24, 0x00	; 0
	;ldi r24, (CLK_PSADIV_4_gc | CLK_PSBCDIV_1_1_gc) ;8MHz

	sts CLK_PSCTRL, r24
 260:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__TEXT_REGION_LENGTH__+0x7de041>

	pop r24
 264:	8f 91       	pop	r24

 266:	08 95       	ret

00000268 <main>:
	0x670,0x6a1,0x6d3,0x705,0x737,0x769,0x79b,0x7cd,
};

#define PERIOD_1567_98HZ 80

int main(void) {
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
	clock_init();
 270:	0e 94 1e 01 	call	0x23c	; 0x23c <clock_init>

	// configure the pin to be an output
	PORTA.DIRSET = PIN2_bm;
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	96 e0       	ldi	r25, 0x06	; 6
 278:	24 e0       	ldi	r18, 0x04	; 4
 27a:	fc 01       	movw	r30, r24
 27c:	21 83       	std	Z+1, r18	; 0x01

	// configure the DMA controller
	//
	// first, reset it
	DMA.CTRL |= DMA_RESET_bm;
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	31 e0       	ldi	r19, 0x01	; 1
 286:	f9 01       	movw	r30, r18
 288:	20 81       	ld	r18, Z
 28a:	20 64       	ori	r18, 0x40	; 64
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18

	// set REPCNT to 0 to repeat an unlimited number of times
	DMA.CH0.REPCNT = 0;
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	fc 01       	movw	r30, r24
 296:	16 8a       	std	Z+22, r1	; 0x16
	DMA.CH0.CTRLA = DMA_CH_REPEAT_bm | DMA_CH_SINGLE_bm | DMA_CH_BURSTLEN_2BYTE_gc;
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	25 e2       	ldi	r18, 0x25	; 37
 29e:	fc 01       	movw	r30, r24
 2a0:	20 8b       	std	Z+16, r18	; 0x10
	DMA.CH0.ADDRCTRL = DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc;
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	29 e5       	ldi	r18, 0x59	; 89
 2a8:	fc 01       	movw	r30, r24
 2aa:	22 8b       	std	Z+18, r18	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_EVSYS_CH0_gc;
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	fc 01       	movw	r30, r24
 2b4:	23 8b       	std	Z+19, r18	; 0x13
	DMA.CH0.TRFCNT = sizeof(sine_data);
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	32 e0       	ldi	r19, 0x02	; 2
 2be:	fc 01       	movw	r30, r24
 2c0:	24 8b       	std	Z+20, r18	; 0x14
 2c2:	35 8b       	std	Z+21, r19	; 0x15
	DMA.CH0.SRCADDR0 = (uint8_t)(((uint32_t)&sine_data[0] >> 0) & 0xff);
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e2       	ldi	r19, 0x20	; 32
 2cc:	fc 01       	movw	r30, r24
 2ce:	20 8f       	std	Z+24, r18	; 0x18
	DMA.CH0.SRCADDR1 = (uint8_t)(((uint32_t)&sine_data[0] >> 8) & 0xff);
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	31 e0       	ldi	r19, 0x01	; 1
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e2       	ldi	r25, 0x20	; 32
 2d8:	09 2e       	mov	r0, r25
 2da:	00 0c       	add	r0, r0
 2dc:	aa 0b       	sbc	r26, r26
 2de:	bb 0b       	sbc	r27, r27
 2e0:	89 2f       	mov	r24, r25
 2e2:	9a 2f       	mov	r25, r26
 2e4:	ab 2f       	mov	r26, r27
 2e6:	bb 27       	eor	r27, r27
 2e8:	f9 01       	movw	r30, r18
 2ea:	81 8f       	std	Z+25, r24	; 0x19
	DMA.CH0.SRCADDR2 = (uint8_t)(((uint32_t)&sine_data[0] >> 16) & 0xff);
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	31 e0       	ldi	r19, 0x01	; 1
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e2       	ldi	r25, 0x20	; 32
 2f4:	09 2e       	mov	r0, r25
 2f6:	00 0c       	add	r0, r0
 2f8:	aa 0b       	sbc	r26, r26
 2fa:	bb 0b       	sbc	r27, r27
 2fc:	cd 01       	movw	r24, r26
 2fe:	aa 27       	eor	r26, r26
 300:	bb 27       	eor	r27, r27
 302:	f9 01       	movw	r30, r18
 304:	82 8f       	std	Z+26, r24	; 0x1a
	DMA.CH0.DESTADDR0 = (uint8_t)(((uint32_t)&DACA.CH0DATA >> 0) & 0xff);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	28 e1       	ldi	r18, 0x18	; 24
 30c:	fc 01       	movw	r30, r24
 30e:	24 8f       	std	Z+28, r18	; 0x1c
	DMA.CH0.DESTADDR1 = (uint8_t)(((uint32_t)&DACA.CH0DATA >> 8) & 0xff);
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	23 e0       	ldi	r18, 0x03	; 3
 316:	fc 01       	movw	r30, r24
 318:	25 8f       	std	Z+29, r18	; 0x1d
	DMA.CH0.DESTADDR2 = (uint8_t)(((uint32_t)&DACA.CH0DATA >> 16) & 0xff);
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	fc 01       	movw	r30, r24
 320:	16 8e       	std	Z+30, r1	; 0x1e

	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	31 e0       	ldi	r19, 0x01	; 1
 32a:	f9 01       	movw	r30, r18
 32c:	20 89       	ldd	r18, Z+16	; 0x10
 32e:	20 68       	ori	r18, 0x80	; 128
 330:	fc 01       	movw	r30, r24
 332:	20 8b       	std	Z+16, r18	; 0x10

	DMA.CTRL |= DMA_ENABLE_bm;
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	31 e0       	ldi	r19, 0x01	; 1
 33c:	f9 01       	movw	r30, r18
 33e:	20 81       	ld	r18, Z
 340:	20 68       	ori	r18, 0x80	; 128
 342:	fc 01       	movw	r30, r24
 344:	20 83       	st	Z, r18

	// configure the DAC to enable channel 0 (pin A2) and use the 2.5V reference from port B
	DACA.CTRLB = DAC_CHSEL_SINGLE_gc;
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	93 e0       	ldi	r25, 0x03	; 3
 34a:	fc 01       	movw	r30, r24
 34c:	11 82       	std	Z+1, r1	; 0x01
	DACA.CTRLC = DAC_REFSEL_AREFB_gc;
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	93 e0       	ldi	r25, 0x03	; 3
 352:	28 e1       	ldi	r18, 0x18	; 24
 354:	fc 01       	movw	r30, r24
 356:	22 83       	std	Z+2, r18	; 0x02
	DACA.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	93 e0       	ldi	r25, 0x03	; 3
 35c:	25 e0       	ldi	r18, 0x05	; 5
 35e:	fc 01       	movw	r30, r24
 360:	20 83       	st	Z, r18
	DACA.CH0DATA = 0;
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	93 e0       	ldi	r25, 0x03	; 3
 366:	fc 01       	movw	r30, r24
 368:	10 8e       	std	Z+24, r1	; 0x18
 36a:	11 8e       	std	Z+25, r1	; 0x19

	// configure and start a timer
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	98 e0       	ldi	r25, 0x08	; 8
 370:	fc 01       	movw	r30, r24
 372:	10 82       	st	Z, r1
	TCC0.CTRLB = TC_WGMODE_NORMAL_gc;
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	98 e0       	ldi	r25, 0x08	; 8
 378:	fc 01       	movw	r30, r24
 37a:	11 82       	std	Z+1, r1	; 0x01
	TCC0.CNT = 0;
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	98 e0       	ldi	r25, 0x08	; 8
 380:	fc 01       	movw	r30, r24
 382:	10 a2       	std	Z+32, r1	; 0x20
 384:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = PERIOD_1567_98HZ;
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	98 e0       	ldi	r25, 0x08	; 8
 38a:	20 e5       	ldi	r18, 0x50	; 80
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	fc 01       	movw	r30, r24
 390:	26 a3       	std	Z+38, r18	; 0x26
 392:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	98 e0       	ldi	r25, 0x08	; 8
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	fc 01       	movw	r30, r24
 39c:	20 83       	st	Z, r18

	// configure event channel 0 to use the timer as an event source
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 39e:	80 e8       	ldi	r24, 0x80	; 128
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	20 ec       	ldi	r18, 0xC0	; 192
 3a4:	fc 01       	movw	r30, r24
 3a6:	20 83       	st	Z, r18

	// loop forever
	while (1);
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <main+0x140>

000003aa <_exit>:
 3aa:	f8 94       	cli

000003ac <__stop_program>:
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <__stop_program>
